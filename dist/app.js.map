{"version":3,"sources":["../src/app.js"],"names":["pgp","require","promiseLib","config","silent","fs","path","AWS","logger","update","region","process","env","AWS_REGION","sns","SNS","conString","PGUSER","PGPASSWORD","PGHOST","PGPORT","PGDATABASE","console","log","db","logparams","level","LOG_LEVEL","maxFileSize","maxFiles","logDirectory","LOG_DIR","filename","logPath","__dirname","accessSync","W_OK","e","sep","add","transports","File","json","maxsize","remove","Console","exitWithStatus","exitStatus","info","setTimeout","exit","sco","connect","then","obj","client","on","data","none","catch","error"],"mappings":";;AAEA;;;;;;AACA,IAAMA,MAAMC,QAAQ,YAAR,EAAsB;AACjCC;AADiC,CAAtB,CAAZ,C,CAHA;AACA;;AAKAD,QAAQ,QAAR,EAAkBE,MAAlB,CAAyB,EAACC,QAAO,IAAR,EAAzB;AACA,IAAMC,KAAKJ,QAAQ,IAAR,CAAX;AACA,IAAMK,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAMM,MAAMN,QAAQ,SAAR,CAAZ;AACA,IAAMO,SAASP,QAAQ,SAAR,CAAf;AACAM,IAAIJ,MAAJ,CAAWM,MAAX,CAAkB,EAACC,QAAOC,QAAQC,GAAR,CAAYC,UAApB,EAAlB;;AAEA,IAAIC,MAAM,IAAIP,IAAIQ,GAAR,EAAV;;AAEA,IAAMC,YAAY,gBAAcL,QAAQC,GAAR,CAAYK,MAA1B,GAAiC,GAAjC,GAAqCN,QAAQC,GAAR,CAAYM,UAAjD,GAA4D,GAA5D,GAAgEP,QAAQC,GAAR,CAAYO,MAA5E,GAAmF,GAAnF,GAAuFR,QAAQC,GAAR,CAAYQ,MAAnG,GAA0G,GAA1G,GAA8GT,QAAQC,GAAR,CAAYS,UAA5I;AACAC,QAAQC,GAAR,CAAYP,SAAZ;;AAEA,IAAIQ,KAAKxB,IAAIgB,SAAJ,CAAT;;AAEA;AACAS,YAAY,EAAZ;AACAA,UAAUC,KAAV,GAAkBf,QAAQC,GAAR,CAAYe,SAA9B,C,CAAyC;AACzCF,UAAUG,WAAV,GAAwB,OAAO,IAAP,GAAc,GAAtC,C,CAA2C;AAC3CH,UAAUI,QAAV,GAAqB,EAArB,C,CAAyB;AACzBJ,UAAUK,YAAV,GAAyBnB,QAAQC,GAAR,CAAYmB,OAArC,C,CAA8C;AAC9CN,UAAUO,QAAV,GAAqB,gCAArB,C,CAAuD;;AAEvD;AACA,IAAIC,UAAYR,UAAUK,YAAV,GAAyBL,UAAUK,YAAnC,GAAkDI,SAAlE;AACA;AACA,IAAI;AACH7B,KAAG8B,UAAH,CAAcF,OAAd,EAAuB5B,GAAG+B,IAA1B;AACA,CAFD,CAEE,OAAOC,CAAP,EAAU;AACXf,UAAQC,GAAR,CAAa,oBAAoBU,OAApB,GAA8B,wBAA3C;AACA,QAAMI,CAAN;AACA;AACDJ,WAAW3B,KAAKgC,GAAhB;AACAL,WAAWR,UAAUO,QAAV,GAAqB,MAAhC;;AAEAxB;AACC;AADD,CAEE+B,GAFF,CAEM/B,OAAOgC,UAAP,CAAkBC,IAFxB,EAE8B;AAC5BT,YAAUC,OADkB,EACT;AACnBS,QAAM,KAFsB,EAEf;AACbC,WAASlB,UAAUG,WAHS,EAGI;AAChCC,YAAUJ,UAAUI,QAJQ,EAIE;AAC9BH,SAAOD,UAAUC,KALW,CAKL;AALK,CAF9B;AASC;AATD,CAUEkB,MAVF,CAUSpC,OAAOgC,UAAP,CAAkBK,OAV3B;;AAYA;AACA;AACA;AACA,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AACnCvC,SAAOwC,IAAP,CAAa,yBAAyBD,UAAtC;AACAE,aAAY,YAAW;AACtBtC,YAAQuC,IAAR,CAAaH,UAAb;AACA,GAFD,EAEG,GAFH;AAGA;;AAEDvC,OAAOwC,IAAP,CAAY,yBAAZ;;AAEA,IAAIG,YAAJ;;AAEA3B,GAAG4B,OAAH,GACEC,IADF,CACO,eAAO;AACZF,QAAMG,GAAN;AACAH,MAAII,MAAJ,CAAWC,EAAX,CAAc,cAAd,EAA8B,gBAAQ;AACrClC,YAAQC,GAAR,CAAY,UAAZ,EAAwBkC,IAAxB;AACA,GAFD;AAGAN,MAAIO,IAAJ,CAAS,YAAT,EAAuB,QAAvB;AACA,CAPF,EAQEC,KARF,CAQQ,iBAAS;AACfrC,UAAQC,GAAR,CAAY,YAAUqC,KAAtB;AACA,CAVF;;AAYA","file":"app.js","sourcesContent":["// External modules\n//const pg = require('pg');\nimport Promise from 'bluebird';\nconst pgp = require('pg-promise')({\n\tpromiseLib: Promise\n});\nrequire('dotenv').config({silent:true});\nconst fs = require('fs');\nconst path = require('path');\nconst AWS = require('aws-sdk');\nconst logger = require('winston');\nAWS.config.update({region:process.env.AWS_REGION});\n\nvar sns = new AWS.SNS();\n\nconst conString = 'postgres://'+process.env.PGUSER+':'+process.env.PGPASSWORD+'@'+process.env.PGHOST+':'+process.env.PGPORT+'/'+process.env.PGDATABASE;\nconsole.log(conString);\n\nlet db = pgp(conString);\n\n// Logging configuration\nlogparams = {};\nlogparams.level = process.env.LOG_LEVEL; // What level to log at; info, verbose or debug are most useful. Levels are (npm defaults): silly, debug, verbose, info, warn, error.\nlogparams.maxFileSize = 1024 * 1024 * 100; // Max file size in bytes of each log file; default 100MB\nlogparams.maxFiles = 10; // Max number of log files kept\nlogparams.logDirectory = process.env.LOG_DIR; // Set this to a full path to a directory - if not set logs will be written to the application directory.\nlogparams.filename = 'cognicity-notification-service'; // base filename to use\n\n// Set up logging\nvar logPath = ( logparams.logDirectory ? logparams.logDirectory : __dirname );\n// Check that log file directory can be written to\ntry {\n\tfs.accessSync(logPath, fs.W_OK);\n} catch (e) {\n\tconsole.log( \"Log directory '\" + logPath + \"' cannot be written to\"  );\n\tthrow e;\n}\nlogPath += path.sep;\nlogPath += logparams.filename + \".log\";\n\nlogger\n\t// Configure custom File transport to write plain text messages\n\t.add(logger.transports.File, {\n\t\tfilename: logPath, // Write to projectname.log\n\t\tjson: false, // Write in plain text, not JSON\n\t\tmaxsize: logparams.maxFileSize, // Max size of each file\n\t\tmaxFiles: logparams.maxFiles, // Max number of files\n\t\tlevel: logparams.level // Level of log messages\n\t})\n\t// Console transport is no use to us when running as a daemon\n\t.remove(logger.transports.Console);\n\n// FIXME This is a workaround for https://github.com/flatiron/winston/issues/228\n// If we exit immediately winston does not get a chance to write the last log message.\n// So we wait a short time before exiting.\nfunction exitWithStatus(exitStatus) {\n\tlogger.info( \"Exiting with status \" + exitStatus );\n\tsetTimeout( function() {\n\t\tprocess.exit(exitStatus);\n\t}, 500 );\n}\n\nlogger.info(\"Application starting...\");\n\nlet sco;\n\ndb.connect()\n\t.then(obj => {\n\t\tsco = obj;\n\t\tsco.client.on('notification', data => {\n\t\t\tconsole.log('Received', data);\n\t\t});\n\t\tsco.none('LISTEN $1~', 'alerts');\n\t})\n\t.catch(error => {\n\t\tconsole.log('Error: '+error);\n\t})\n\n/*\npg.connect(conString, function(err, client, done) {\n  logger.info(\"Database connection successful\");\n  if (err){\n    logger.error(\"database err: \" + err);\n    done();\n  }\n  // Return the listen notification\n  client.on('notification', function(msg) {\n\t\tconsole.log(msg)\n\n    /*try {\n      logger.info('Msg: ' + msg);\n      logger.info('Payload: ' + msg.payload);\n      var notification = JSON.parse(msg.payload);\n      logger.info('Parse successful');\n\n      var topicName = \"\";\n      if (notification.cards.network === 'facebook'){\n        logger.info('Received card submission via Facebook');\n        topicName = \"Facebook\";\n      } else if (notification.cards.network === 'telegram') {\n        logger.info('Received card submission via Telegram');\n        topicName = \"Telegram\";\n      } else if (notification.cards.network === 'twitter') {\n        logger.info('Received card submission via Twitter');\n        topicName = \"Twitter\";\n      }\n\n      //Construct JSON with relevant details for a confirmation response to be published to SNS topic\n      var jsonMessage = {\n        \"language\" : notification.cards.language,\n        \"username\" : notification.cards.username,\n        \"implementation_area\": notification.cards.report_impl_area,\n        \"report_id\": notification.cards.report_id\n      };\n      if(topicName !== \"\")\n      {\n        //Construct message payload\n        var params = {\n          Message: JSON.stringify(jsonMessage),\n          TopicArn: \"arn:aws:sns:\" + process.env.AWS_REGION + \":\" + process.env.ACCOUNTID + \":\" + topicName\n        };\n        logger.info(\"Publishing to \" + topicName + \" SNS topic\");\n        sns.publish(params, function(err, data) {\n          if (err) {\n            logger.error(\"Error on publishing message to topic\" + topicName);\n            logger.error(err);\n          } else {\n            logger.info(\"Message published to \" + topicName + \" SNS topic successfully\");\n            logger.debug(data);\n          }\n        });\n      }\n    } catch (e){\n      logger.error('Error processing listen notification from database\\n'+e);\n    }\n  });\n  // Initiate the listen query\n  client.query(\"LISTEN watchers\");\n\tclient.query(\"LISTEN alerts\");\n\n});*/\n"]}